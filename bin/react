#!/usr/bin/env python

from rxn_ca.core.recipe import ReactionRecipe
from rxn_ca.reactions import ReactionLibrary
from rxn_ca.computing.schemas.ca_result_schema import compress_doc

from rxn_ca.utilities.single_sim import run_single_sim
from rxn_ca.utilities.parallel_sim import run_sim_parallel
from rxn_ca.utilities.prints import print_banner

from pylattica.core import Simulation

import argparse
import os
import time
import sys

parser = argparse.ArgumentParser(
                    prog="Reaction Automaton",
                    description="Runs the rxn-ca automaton",
)

parser.add_argument('recipe_filename')
parser.add_argument('-d', '--input-dir')
parser.add_argument('-o', '--output-file')
parser.add_argument('-p', '--output-dir')
parser.add_argument('-c', '--compress', action=argparse.BooleanOptionalAction)
parser.add_argument('-l', '--reaction-library-file')
parser.add_argument('-i', '--initial-simulation-file')

parser.add_argument('-s', '--single', default=False, action='store_true')
parser.add_argument('--store-lib', default=False, action=argparse.BooleanOptionalAction)

args = parser.parse_args()

output_file = args.output_file
output_dir = args.output_dir
recipe_filename = args.recipe_filename
reaction_library_filename = args.reaction_library_file
initial_simulation_filename = args.initial_simulation_file
compress = args.compress
store_lib = args.store_lib

print_banner()

print(f"Reading recipe from {recipe_filename}...")

if output_file is None:
    output_fname = recipe_filename.split("/")[-1]

    if output_dir is None:
        output_dir = os.path.dirname(recipe_filename)
    
    output_file = os.path.join(output_dir, output_fname)

print(f"Choosing {output_file} as output location")

recipe = ReactionRecipe.from_file(recipe_filename)

if reaction_library_filename is not None:
    print(f"Reading reaction library from {reaction_library_filename}...")
    rxn_lib = ReactionLibrary.from_file(reaction_library_filename)
    reaction_set = None
    phases = rxn_lib.phases
else:
    print("--reaction-library-file is required to use the react script")
    sys.exit()

if initial_simulation_filename is not None:
    initial_simulation = Simulation.from_file(initial_simulation_filename)
else:
    initial_simulation = None

if args.single:
    result = run_single_sim(
        recipe,
        base_reactions=reaction_set,
        reaction_lib=rxn_lib,
        initial_simulation=initial_simulation,
        phase_set = phases
    )
else:
    result = run_sim_parallel(
        recipe,
        base_reactions=reaction_set,
        reaction_lib=rxn_lib,
        initial_simulation=initial_simulation,
        phase_set = phases
    )

print(f'================= SAVING RESULTS to {output_file} =================')


if args.compress:
    print("Compressing result...")
    compressed_fpath = output_file.split(".")[0] + "_compressed.json"
    compressed = compress_doc(result, num_steps=500)
    if not store_lib:
        print("Discarding reaction library...")
        compressed.reaction_library = None
    print(f"Saving compressed results to {compressed_fpath}")
    compressed.to_file(compressed_fpath)
else:
    print(f"Saving original results to {output_file}...")
    result.to_file(output_file)

