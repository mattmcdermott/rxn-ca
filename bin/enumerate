from rxn_ca.utilities.enumerate_rxns import enumerate_rxns
from rxn_ca.utilities.get_entries import get_entries
from rxn_ca.phases import SolidPhaseSet
from rxn_network.entries.entry_set import GibbsEntrySet

import argparse

import json

parser = argparse.ArgumentParser(
                    prog="Reaction enumeration",
                    description="enumerates reactions",
)

parser.add_argument('-m', '--reaction-manifest')

parser.add_argument('-s', '--chemical-system')
parser.add_argument('-e', '--energy-cutoff')
parser.add_argument('-f', '--formulas-to-include')
parser.add_argument('-t', '--extra-entry-set-file')

parser.add_argument('-o', '--output-file')

args = parser.parse_args()

manifest_filename = args.reaction_manifest

if manifest_filename is not None:
    with open(manifest_filename, 'r+') as f:
        manifest = json.load(f)

    chem_sys = manifest.get("chemical_system")
    formulas_to_include = manifest.get("formulas_to_include", [])
    energy_cutoff = manifest.get("energy_cutoff", 0.01)
else:
    chem_sys = args.chemical_system
    energy_cutoff = float(args.energy_cutoff) if args.energy_cutoff is not None else 0.01
    formulas_to_include = args.formulas_to_include
    if formulas_to_include is None:
        formulas_to_include = []
    else:
        formulas_to_include = formulas_to_include.split(",")

if chem_sys is None:
    print("chemical system most be provided! either by the -s flag, or as the chemical_system value in the reaction manifest")

print(f"Enumerating rxns for {chem_sys} using energy cutoff {energy_cutoff} and ensuring formulas {formulas_to_include} are present")          

if args.extra_entry_set_file is not None:
    with open(args.extra_entry_set_file, "r+") as f:
        eset_dict = json.load(f)
        extra_entry_set = GibbsEntrySet.from_dict(eset_dict['entry_set'])
        entry_metadata = eset_dict['entry_metadata']

entries = get_entries(
    chem_sys,
    stability_cutoff=energy_cutoff,
    formulas_to_include=formulas_to_include,
    custom_entries=extra_entry_set.entries_list
)

phase_set = SolidPhaseSet.from_entry_set(entries, entry_metadata=entry_metadata)

result = enumerate_rxns(chem_sys=chem_sys,
                        stability_cutoff=energy_cutoff,
                        formulas_to_include=formulas_to_include)


output_filename = args.output_file

if output_filename is None:
    output_filename = f'{chem_sys}_reactions.json'

result.to_file(output_filename)


# chem_syses = [
#     "Ba-Cl-Na-Ti-O",
#     "Ba-S-Na-Ti-O",
#     "Ba-Ti-O",
#     "Ba-Ti-O-H",
#     "Ba-Ti-O-S",
#     "Fe-Si-S",
#     "Li-Mn-O-H",
#     "Li-Mn-Ti-F-C-O",
#     "Y-Ba-Cu-O",
#     "Y-Mn-C-Cl-O-Li",
#     "Cl-Li-Mn-O-Y",
#     "Yb-Ru-Sn",
#     "Bi-Fe-O",
#     "Co-Cl-H-O",
#     "Ca-S-O-H",
#     "Cu-O",
#     "Mg-Al-O",
#     "Y-Mn-Cl-Na-C-O"
# ]

# formulas_to_include = {
#     "Ba-S-Na-Ti-O": ["Na2TiO3"],
#     "Ba-Cl-Na-Ti-O": ["Na2TiO3", "BaCl2"],
# }

# special_cutoffs = {
#     "Li-Mn-Ti-F-C-O": [0.01],
#     "Y-Mn-C-Cl-O-Li": [0.01],
#     "Y-Mn-Cl-O-Li": [0.01],
#     "Y-Mn-Cl-Na-C-O": [0.03]    
# }

# full_extras = list(range(400,1500,100))

# extra_temps = {
#     "Ba-Cl-Na-Ti-O": full_extras,
#     "Ba-S-Na-Ti-O": full_extras,
#     "Ba-Ti-O": full_extras,
#     "Ba-Ti-O-H": full_extras,
#     "Ba-Ti-O-S": full_extras,
#     "Fe-Si-S": full_extras,
#     "Li-Mn-O-H": full_extras,
#     "Li-Mn-Ti-F-C-O": full_extras,
#     "Y-Ba-Cu-O": full_extras,
#     "Y-Mn-C-Cl-O-Li": full_extras,
#     "Y-Mn-Cl-Na-C-O": full_extras,
#     "Cl-Li-Mn-O-Y": full_extras,
#     "Yb-Ru-Sn": full_extras,
#     "Bi-Fe-O": full_extras,
#     "Co-Cl-H-O": full_extras,
#     "Ca-S-O-H": full_extras,
#     "Cu-O": full_extras,
#     "Mg-Al-O": full_extras
# }