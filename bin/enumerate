from rxn_ca import AutomatonStore, enumerate_rxns

import argparse

import json

parser = argparse.ArgumentParser(
                    prog="Reaction enumeration",
                    description="enumerates reactions",
)

parser.add_argument('reaction_manifest')

args = parser.parse_args()

output_file = args.reaction_manifest

with open(output_file, 'r+') as f:
    manifest = json.load(f)

chem_syses = manifest["chem_syses"]
formulas_to_include = manifest["formulas_to_include"]
special_cutoffs = manifest["special_cutoffs"]
extra_temps = manifest["extra_temps"]
# chem_syses = [
#     "Ba-Cl-Na-Ti-O",
#     "Ba-S-Na-Ti-O",
#     "Ba-Ti-O",
#     "Ba-Ti-O-H",
#     "Ba-Ti-O-S",
#     "Fe-Si-S",
#     "Li-Mn-O-H",
#     "Li-Mn-Ti-F-C-O",
#     "Y-Ba-Cu-O",
#     "Y-Mn-C-Cl-O-Li",
#     "Cl-Li-Mn-O-Y",
#     "Yb-Ru-Sn",
#     "Bi-Fe-O",
#     "Co-Cl-H-O",
#     "Ca-S-O-H",
#     "Cu-O",
#     "Mg-Al-O",
#     "Y-Mn-Cl-Na-C-O"
# ]

# formulas_to_include = {
#     "Ba-S-Na-Ti-O": ["Na2TiO3"],
#     "Ba-Cl-Na-Ti-O": ["Na2TiO3", "BaCl2"],
# }

# special_cutoffs = {
#     "Li-Mn-Ti-F-C-O": [0.01],
#     "Y-Mn-C-Cl-O-Li": [0.01],
#     "Y-Mn-Cl-O-Li": [0.01],
#     "Y-Mn-Cl-Na-C-O": [0.03]    
# }

# full_extras = list(range(400,1500,100))

# extra_temps = {
#     "Ba-Cl-Na-Ti-O": full_extras,
#     "Ba-S-Na-Ti-O": full_extras,
#     "Ba-Ti-O": full_extras,
#     "Ba-Ti-O-H": full_extras,
#     "Ba-Ti-O-S": full_extras,
#     "Fe-Si-S": full_extras,
#     "Li-Mn-O-H": full_extras,
#     "Li-Mn-Ti-F-C-O": full_extras,
#     "Y-Ba-Cu-O": full_extras,
#     "Y-Mn-C-Cl-O-Li": full_extras,
#     "Y-Mn-Cl-Na-C-O": full_extras,
#     "Cl-Li-Mn-O-Y": full_extras,
#     "Yb-Ru-Sn": full_extras,
#     "Bi-Fe-O": full_extras,
#     "Co-Cl-H-O": full_extras,
#     "Ca-S-O-H": full_extras,
#     "Cu-O": full_extras,
#     "Mg-Al-O": full_extras
# }

store = AutomatonStore()

store.list_available_sets()

default_cutoffs = [0.01]

for sys in chem_syses:
    if sys in special_cutoffs:
        cutoffs = special_cutoffs.get(sys)
    else:
        cutoffs = default_cutoffs
        
    for cutoff in cutoffs:
        print(f"Enumerating rxns for {sys} at {cutoff} ")          
        enumerate_rxns(sys,
                       stability_cutoff=cutoff,
                       base_temp=300,
                       other_temps=extra_temps.get(sys),
                       formulas_to_include=formulas_to_include.get(sys, []))